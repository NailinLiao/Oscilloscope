# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import string
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from threading import Thread
from multiprocessing import Queue
import json
from Config import *
import time
from PyQt5.QtWidgets import *


class Ui_MainWindow(QMainWindow):

    def __init__(self, json_path, q: Queue):
        super(Ui_MainWindow, self).__init__()
        self.setupUi(self)

        self.q = q
        self.comboBox_2.addItems(config['label_list'])
        self.json_path = json_path
        if os.path.exists(self.json_path):
            f = open(self.json_path, 'r', encoding='UTF-8')  # 打开dict0.json
            self.json_data = json.load(f)
        else:
            self.json_data = json_struct
        file_name = str(os.path.split(json_path)[-1]).split('.')[0]
        self.json_data['video_name'] = file_name
        self.json_data['Modification_time'] = time.time()
        # 创建线程
        thread01 = Thread(target=self.lisen_q, name="线程1")
        # 设置守护线程【可选】
        thread01.setDaemon(True)
        # 启动线程
        thread01.start()

    def lisen_q(self):
        while True:
            if self.q.qsize() > 0:
                time = self.q.get()
                self.lineEdit_3.setText(str(time))

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(516, 299)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(210, 30, 71, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(40, 30, 71, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(380, 30, 71, 16))
        self.label_3.setObjectName("label_3")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(200, 60, 113, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(370, 60, 113, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(30, 60, 113, 20))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(360, 120, 101, 41))
        self.pushButton.setObjectName("pushButton")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(200, 130, 67, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(210, 100, 71, 16))
        self.label_4.setObjectName("label_4")
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(40, 130, 67, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(60, 100, 71, 16))
        self.label_5.setObjectName("label_5")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(30, 230, 113, 20))
        self.lineEdit_4.setText("")
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(40, 200, 71, 16))
        self.label_6.setObjectName("label_6")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(180, 210, 101, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.setup_function()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Mark Label Tool"))
        self.label.setText(_translate("MainWindow", "事件开始时间"))
        self.label_2.setText(_translate("MainWindow", "事件触发时间"))
        self.label_3.setText(_translate("MainWindow", "事件结束时间"))
        self.pushButton.setText(_translate("MainWindow", "写入标注"))
        self.comboBox.setItemText(0, _translate("MainWindow", "事件"))
        self.comboBox.setItemText(1, _translate("MainWindow", "触发"))
        self.label_4.setText(_translate("MainWindow", "记录类型"))
        self.label_5.setText(_translate("MainWindow", "标签"))
        self.label_6.setText(_translate("MainWindow", "编辑新标签"))
        self.pushButton_2.setText(_translate("MainWindow", "添加标签"))

    def write_label(self):
        with open(self.json_path, 'w', encoding='UTF-8') as f:
            # 将json数据写进一个文件当中去
            json.dump(self.json_data, f)

    def closeEvent(self, event):
        self.write_label()
        """Shuts down application on close."""
        reply = QMessageBox.question(self, '警告', '<font color=red><b>窗口关闭后，将终止本次标注运行,需要关闭整体程序再运行才可以激活该标注面板。</b></font>',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()

    def setup_function(self):
        self.pushButton.clicked.connect(self.marke_label)
        self.pushButton_2.clicked.connect(self.add_label)

    def marke_label(self):

        annotation_type = self.comboBox.currentText()
        start_time = self.lineEdit.text()
        end_time = self.lineEdit_2.text()
        trigger_event = self.lineEdit_3.text()
        label = str(self.comboBox_2.currentText())
        # label = label.decode("unicode_escape")
        # label = json.loads('"%s"' % label)
        print(type(label), label)
        if annotation_type == '事件':
            self.json_data['label'].append({
                'label': label,
                'start_time': start_time,
                'end_time': end_time,
            })
            QMessageBox.about(self, '提示', '事件添加完成')
        else:
            self.json_data['label'].append({
                'label': label,
                'trigger_event': trigger_event,
            })
            QMessageBox.about(self, '提示', '触发添加完成')

    def add_label(self):
        label = self.lineEdit_4.text()
        self.comboBox_2.addItem(label)
        QMessageBox.about(self, '提示', '添加标签完成')


if __name__ == '__main__':
    app = QApplication(sys.argv)
    q = Queue()

    ui_main = Ui_MainWindow('./a.json', q)
    ui_main.show()
    sys.exit(app.exec_())
